openapi: 3.0.1
info:
  title: Kubetest
  description: 'Efficient testing of k8s applications mandates a k8s native approach to test mgmt/definition/execution - kubetest provides a “quality control plane” that natively integrates testing activities into k8s development and operational workflows'
  termsOfService: http://kubetest.io/terms/
  contact:
    email: api@kubetest.io
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 0.0.1
externalDocs:
  description: 'Find out more about Kubetest'
  url: http://kubetest.io
servers:
- url: https://api.kubetest.io/v1
tags:
- name: scripts
  description: 'Operation based on scripts resource' 
- name: executor
  description: 'Scripts execution' 

paths:

  /scripts:
    get:
      tags:
      - scripts
      summary: 'Get all scripts'
      description: 'filters will be added later'
      operationId: getAllScripts
      responses:
        200:
          description: 'successful operation'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Script'
    post:
      tags:
      - scripts
      summary: 'create new script'
      description: 'filters will be added later'
      operationId: createScript
      requestBody:
        description: script details body
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScriptCreateRequest'
      responses:
        200:
          description: 'successful operation'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Script'
                  
  /scripts/{id}/executions:
    post:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: 'ID of the script'
        - in: query
          name: namespace
          schema:
            type: integer
          description: kubernetes namespace 
      tags:
      - scripts
      summary: 'Starts new script execution'
      description: 'New script execution returns new execution details on successful execution start'
      operationId: executeScript
      requestBody:
        description: body passed to configure execution
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScriptExecutionRequest'
      responses:
        201:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Execution'
  
    get:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the script
      tags:
      - scripts
      summary: 'Get all script executions'
      description: 'Returns array of all available script executions'
      operationId: getScriptExecutions
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Execution'
                  

  /scripts/{id}/executions/{executionID}:
    get:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the script 
        - in: path
          name: executionID
          schema:
            type: string
          required: true
          description: ID of the script execution
      tags:
      - scripts
      summary: 'Get script execution'
      description: 'Returns execution with given executionID'
      operationId: getScriptExecution
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Execution'

  /scripts/{id}/executions/{executionID}/abort:
    post:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the script
        - in: path
          name: executionID
          schema:
            type: string
          required: true
          description: ID of the script execution
      tags:
      - scripts
      summary: 'Aborts execution'
      description: 'Aborts execution and returns execution details'
      operationId: abortScriptExecution
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Execution'
  /executions/:
    post:
      tags:
      - executor
      summary: 'Starts script execution'
      description: 'Starts script execution, returns pending execution with ID'
      operationId: executueScript
      responses:
        201:
          description: 'successful operation'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Execution'
  /executions/{id}:
    get:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: 'ID of the execution'
      tags:
      - executor
      summary: 'Get execution by ID'
      description: 'Gets execution with given ID, returns deailed information about test execution'
      operationId: getExecution
      responses:
        200:
          description: 'successful operation'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Execution'

  
components:
  schemas:
    Script:
      type: object
      properties:
        id:
          type: string
          format: bson objectId
        name:
          type: string
          description: script name
        type:
          type: string
          description: script type
          enum: 
          - postman/collection
        content:
          type: string
          description: script content
        created:
          type: string
          format: date-time
    ScriptExecution:
      type: object
      description: API server script execution
      properties:
        id:
          type: string
          description: execution id 
          format: bson objectId
        script-name:
          type: string
          description: unique script name (CRD Script name)
        script-type:
          type: string
          description: script type e.g. postman/collection
        name:
          type: string
          description: 'execution name'
        envs: 
          type: object
          description: 'execution envs passed to executor'
          additionalProperties: 
            type: string
          example: 
            users: "3"
            prefix: "some-"
        params: 
          type: object
          description: 'execution params passed to executor'
          additionalProperties: 
            type: string
          example: 
            users: "3"
            prefix: "some-"
        execution: 
          description: 'execution result returned from executor'
          $ref: '#/components/schemas/Execution' 
    Execution:
      description: object which should be returned by REST based executors
      type: object
      properties:
        id:
          type: string
          description: execution id
          format: bson objectId
        script-content: 
          type: string
          description: script metadata content
        params: 
          type: object
          description: 'execution params passed to executor'
          additionalProperties: 
            type: string
          example: 
            users: "3"
            prefix: "some-"
        status: 
          type: string
          description: 'execution status'
          enum: 
          - queued
          - pending 
          - success 
          - failed
        output:
          type: string
          description: 'RAW Script execution output, depends of reporter used in particular tool'
        output-type:
          type: string
          description: 'output type depends of reporter used in partucular tool'
          enum: 
          - text/plain
          - application/junit+xml
          - application/json
        error-message: 
          type: string
          description: 'error message when status is failed, separate to output as output can be partial in case of error'
        start-time:
          type: string
          description: 'test start time'
          format: date-time
        end-time:
          type: string
          description: 'test end time'
          format: date-time
    ScriptExecutionRequest: 
      description: scripts execution request body
      type: object
      properties:
        name:
          type: string
          description: script execution custom name
          example: testing with 1000 users
        envs: 
          type: object
          description: 'execution params passed to executor'
          additionalProperties: 
            type: string
          example: 
            users: "3"
            prefix: "some-"
        params: 
          type: object
          description: 'execution params passed to executor'
          additionalProperties: 
            type: string
          example: 
            users: "3"
            prefix: "some-"
    ScriptCreateRequest: 
      description: scripts create request body
      type: object
      properties:
        name:
          type: string
          description: script name - Custom Resource name - must be unique
          example: kubeshop-homepage-test
        type:
          type: string
          description: script type - what executor type should be used during test execution
          example: postman/collection
        namespace:
          type: string
          description: kubernetes namespace (defaults to 'default')
          example: default
        content:
          type: string
          description: script content - executor specific e.g. fo postman-collections executor
          example: >
            {
              "info": {
                "_postman_id": "57ad6291-5b8f-4b2d-b24d-d2d2ce8785bb",
                "name": "SimpleKubeshop",
                "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
              },
              "item": [
                {
                  "name": "Homepage",
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": null
                  },
                  "response": []
                }
